AWSTemplateFormatVersion: 2010-09-09
Description: Network template contains vpc, subnets,route table, routes, endpointService- s3, dynamo db
Parameters:
  VpcName:
    Description: Enter the name of VPC
    Type: String
  VpcCIDR:
    Description: Enter the IP range (CIDR) for VPC
    Type: String
  publicSubnet1Name:
    Description: Enter the name for public subnet 1
    Type: String
  publicSubnet1CIDR:
    Description: Enter the IP range (CIDR) for the public subnet in the first AZ
    Type: String
  publicSubnet2Name:
    Description: Enter the name for public subnet 2
    Type: String
  publicSubnet2CIDR:
    Description: Enter the IP range (CIDR) for the public subnet in the second AZ
    Type: String
  publicSubnet3Name:
    Description: Enter the name for public subnet 3
    Type: String
  publicSubnet3CIDR:
    Description: Enter the IP range (CIDR) for the public subnet in the third AZ
    Type: String
  frontendSubnet1Name:
    Description: Enter the name for frontend subnet 1
    Type: String
  frontendSubnet1CIDR:
    Description: Enter the IP range (CIDR) for the frontend subnet in the first AZ
    Type: String
  frontendSubnet2Name:
    Description: Enter the name for frontend subnet 2
    Type: String
  frontendSubnet2CIDR:
    Description: Enter the IP range (CIDR) for the frontend subnet in the second AZ
    Type: String
  frontendSubnet3Name:
    Description: Enter the name for frontend subnet 3
    Type: String
  frontendSubnet3CIDR:
    Description: Enter the IP range (CIDR) for the frontend subnet in the third AZ
    Type: String
  backendSubnet1Name:
    Description: Enter the name for backend subnet 1
    Type: String
  backendSubnet1CIDR:
    Description: Enter the IP range (CIDR) for the backend subnet in the first AZ
    Type: String
  backendSubnet2Name:
    Description: Enter the name for backend subnet 2
    Type: String
  backendSubnet2CIDR:
    Description: Enter the IP range (CIDR) for the backend subnet in the second AZ
    Type: String
  backendSubnet3Name:
    Description: Enter the name for backend subnet 3
    Type: String
  backendSubnet3CIDR:
    Description: Enter the IP range (CIDR) for the backend subnet in the third AZ
    Type: String
  publicRouteTableName:
    Description: Enter the name for public route table
    Type: String
  frontendRouteTableName:
    Description: Enter the name for frontend route table
    Type: String
  backendRouteTableName:
    Description: Enter the name for backend route table
    Type: String
  TgwName:
    Description: Enter the name for transit gateway
    Type: String
  TagOwner:
    Type: String
    Description: Owner tag
  TagEmail:
    Type: String
    Description: Email tag
  TagEnvironment:
    Type: String
    Description: Environment tag

Resources:
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
        - Key: Name
          Value: !Ref VpcName
        - Key: Owner
          Value: !Ref TagOwner
        - Key: Email
          Value: !Ref TagEmail
        - Key: Environment
          Value: !Ref TagEnvironment

  DhcpOptions:
    Type: AWS::EC2::DHCPOptions
    Properties:
      DomainName: !Sub '${AWS::Region}.compute.internal'
      DomainNameServers:
        - AmazonProvidedDNS
      NtpServers:
        - "216.239.35.0"
      Tags:
        - Key: Name
          Value: !Ref VpcName
        - Key: Owner
          Value: !Ref TagOwner
        - Key: Email
          Value: !Ref TagEmail
        - Key: Environment
          Value: !Ref TagEnvironment

  VPCDHCPOptionsAssociation:
    Type: AWS::EC2::VPCDHCPOptionsAssociation
    Properties:
      VpcId: !Ref Vpc
      DhcpOptionsId: !Ref DhcpOptions

  # ---- Subnets ---- #
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: Vpc
      CidrBlock:
        Ref: publicSubnet1CIDR
      AvailabilityZone:  !Select
        - '0'
        - !GetAZs
          Ref: 'AWS::Region'
      EnableDns64: "false"
      MapPublicIpOnLaunch: "false"
      Tags:
        - Key: Name
          Value: !Ref publicSubnet1Name
        - Key: Owner
          Value: !Ref TagOwner
        - Key: Email
          Value: !Ref TagEmail
        - Key: Environment
          Value: !Ref TagEnvironment

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: Vpc
      CidrBlock:
        Ref: publicSubnet2CIDR
      AvailabilityZone: !Select
        - '1'
        - !GetAZs
          Ref: 'AWS::Region'
      EnableDns64: "false"
      MapPublicIpOnLaunch: "false"
      Tags:
        - Key: Name
          Value: !Ref publicSubnet2Name
        - Key: Owner
          Value: !Ref TagOwner
        - Key: Email
          Value: !Ref TagEmail
        - Key: Environment
          Value: !Ref TagEnvironment

  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: Vpc
      CidrBlock:
        Ref: publicSubnet3CIDR
      AvailabilityZone: !Select
        - '2'
        - !GetAZs
          Ref: 'AWS::Region'
      EnableDns64: "false"
      MapPublicIpOnLaunch: "false"
      Tags:
        - Key: Name
          Value: !Ref publicSubnet3Name
        - Key: Owner
          Value: !Ref TagOwner
        - Key: Email
          Value: !Ref TagEmail
        - Key: Environment
          Value: !Ref TagEnvironment

  FrontendSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: Vpc
      CidrBlock:
        Ref: frontendSubnet1CIDR
      AvailabilityZone:  !Select
        - '0'
        - !GetAZs
          Ref: 'AWS::Region'
      EnableDns64: "false"
      MapPublicIpOnLaunch: "false"
      Tags:
        - Key: Name
          Value: !Ref frontendSubnet1Name
        - Key: Owner
          Value: !Ref TagOwner
        - Key: Email
          Value: !Ref TagEmail
        - Key: Environment
          Value: !Ref TagEnvironment

  FrontendSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: Vpc
      CidrBlock:
        Ref: frontendSubnet2CIDR
      AvailabilityZone: !Select
        - '1'
        - !GetAZs
          Ref: 'AWS::Region'
      EnableDns64: "false"
      MapPublicIpOnLaunch: "false"
      Tags:
        - Key: Name
          Value: !Ref frontendSubnet2Name
        - Key: Owner
          Value: !Ref TagOwner
        - Key: Email
          Value: !Ref TagEmail
        - Key: Environment
          Value: !Ref TagEnvironment

  FrontendSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: Vpc
      CidrBlock:
        Ref: frontendSubnet3CIDR
      AvailabilityZone: !Select
        - '2'
        - !GetAZs
          Ref: 'AWS::Region'
      EnableDns64: "false"
      MapPublicIpOnLaunch: "false"
      Tags:
        - Key: Name
          Value: !Ref frontendSubnet3Name
        - Key: Owner
          Value: !Ref TagOwner
        - Key: Email
          Value: !Ref TagEmail
        - Key: Environment
          Value: !Ref TagEnvironment

  BackendSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref backendSubnet1CIDR
      AvailabilityZone: !Select
        - '0'
        - !GetAZs
          Ref: 'AWS::Region'
      EnableDns64: "false"
      MapPublicIpOnLaunch: "false"
      Tags:
        - Key: Name
          Value: !Ref backendSubnet1Name
        - Key: Owner
          Value: !Ref TagOwner
        - Key: Email
          Value: !Ref TagEmail
        - Key: Environment
          Value: !Ref TagEnvironment

  BackendSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref backendSubnet2CIDR
      AvailabilityZone: !Select
        - '1'
        - !GetAZs
          Ref: 'AWS::Region'
      EnableDns64: "false"
      MapPublicIpOnLaunch: "false"
      Tags:
        - Key: Name
          Value: !Ref backendSubnet2Name
        - Key: Owner
          Value: !Ref TagOwner
        - Key: Email
          Value: !Ref TagEmail
        - Key: Environment
          Value: !Ref TagEnvironment

  BackendSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Ref backendSubnet3CIDR
      AvailabilityZone: !Select
        - '2'
        - !GetAZs
          Ref: 'AWS::Region'
      EnableDns64: "false"
      MapPublicIpOnLaunch: "false"
      Tags:
        - Key: Name
          Value: !Ref backendSubnet3Name
        - Key: Owner
          Value: !Ref TagOwner
        - Key: Email
          Value: !Ref TagEmail
        - Key: Environment
          Value: !Ref TagEnvironment


  # ---- Route Tables ---- #
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Ref publicRouteTableName
        - Key: Owner
          Value: !Ref TagOwner
        - Key: Email
          Value: !Ref TagEmail
        - Key: Environment
          Value: !Ref TagEnvironment

  FrontendRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Ref frontendRouteTableName
        - Key: Owner
          Value: !Ref TagOwner
        - Key: Email
          Value: !Ref TagEmail
        - Key: Environment
          Value: !Ref TagEnvironment
          
  BackendRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Ref backendRouteTableName
        - Key: Owner
          Value: !Ref TagOwner
        - Key: Email
          Value: !Ref TagEmail
        - Key: Environment
          Value: !Ref TagEnvironment


  # ---- Subnet Association ---- #
  PublicSubnetAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnetAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PublicSubnetAssociation3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet3

  FrontendSubnetAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref FrontendRouteTable
      SubnetId: !Ref FrontendSubnet1

  FrontendSubnetAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref FrontendRouteTable
      SubnetId: !Ref FrontendSubnet2

  FrontendSubnetAssociation3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref FrontendRouteTable
      SubnetId: !Ref FrontendSubnet3

  BackendSubnetAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref BackendRouteTable
      SubnetId: !Ref BackendSubnet1

  BackendSubnetAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref BackendRouteTable
      SubnetId: !Ref BackendSubnet2

  BackendSubnetAssociation3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref BackendRouteTable
      SubnetId: !Ref BackendSubnet3

  # ---- Transit gateway and attachment ---- #
  TransitGateway:
    Type: AWS::EC2::TransitGateway
    Properties:
      AmazonSideAsn: 65000
      AutoAcceptSharedAttachments: 'enable'
      DefaultRouteTableAssociation: 'disable'
      DefaultRouteTablePropagation: 'disable'
      Description: 'Transit Gateway'
      DnsSupport: 'enable'
      MulticastSupport: 'disable'
      VpnEcmpSupport: 'enable'
      Tags:
        - Key: Name
          Value: !Ref TgwName
        - Key: Owner
          Value: !Ref TagOwner
        - Key: Email
          Value: !Ref TagEmail
        - Key: Environment
          Value: !Ref TagEnvironment

  TransitGatewayAttachment:
    Type: AWS::EC2::TransitGatewayAttachment
    Properties:
      Options:
        DnsSupport: 'enable'
      SubnetIds:
        - !Ref BackendSubnet1
        - !Ref BackendSubnet2
        - !Ref BackendSubnet3
      TransitGatewayId: !Ref TransitGateway
      VpcId: !Ref Vpc

  # ---- Routes ---- #
  PublicRoutes1:
    Type: AWS::EC2::Route
    DependsOn: TransitGatewayAttachment
    Properties:
      DestinationCidrBlock: '10.0.0.0/8'
      RouteTableId: !Ref PublicRouteTable
      TransitGatewayId: !Ref TransitGateway

  PublicRoutes2:
    Type: AWS::EC2::Route
    DependsOn: TransitGatewayAttachment
    Properties:
      DestinationCidrBlock: '172.30.32.0/22'
      RouteTableId: !Ref PublicRouteTable
      TransitGatewayId: !Ref TransitGateway

  PublicRoutes3:
    Type: AWS::EC2::Route
    DependsOn: TransitGatewayAttachment
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      RouteTableId: !Ref PublicRouteTable
      TransitGatewayId: !Ref TransitGateway

  FrontendRoutes1:
    Type: AWS::EC2::Route
    DependsOn: TransitGatewayAttachment
    Properties:
      DestinationCidrBlock: '172.30.32.0/22'
      RouteTableId: !Ref FrontendRouteTable
      TransitGatewayId: !Ref TransitGateway

  FrontendRoutes2:
    Type: AWS::EC2::Route
    DependsOn: TransitGatewayAttachment
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      RouteTableId: !Ref FrontendRouteTable
      TransitGatewayId: !Ref TransitGateway

  BackendRoutes1:
    Type: AWS::EC2::Route
    DependsOn: TransitGatewayAttachment
    Properties:
      DestinationCidrBlock: '172.30.32.0/22'
      RouteTableId: !Ref BackendRouteTable
      TransitGatewayId: !Ref TransitGateway

  BackendRoutes2:
    Type: AWS::EC2::Route
    DependsOn: TransitGatewayAttachment
    Properties:
      DestinationCidrBlock: '0.0.0.0/0'
      RouteTableId: !Ref BackendRouteTable
      TransitGatewayId: !Ref TransitGateway

  #----Endpoint Service -------#
  EndpointServices3:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: Gateway
      VpcId: !Ref Vpc
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
      PolicyDocument:
        Version: 2008-10-17
        Statement:
          - Effect: Allow
            Principal: "*"
            Action: "*"
            Resource: "*"
      PrivateDnsEnabled: false
      RouteTableIds:
        - !Ref FrontendRouteTable
        - !Ref BackendRouteTable

  EndpointServiceDb:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcEndpointType: Gateway
      VpcId: !Ref Vpc
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.dynamodb'
      PolicyDocument:
        Version: 2008-10-17
        Statement:
          - Effect: Allow
            Principal: "*"
            Action: "*"
            Resource: "*"
      PrivateDnsEnabled: false
      RouteTableIds:
        - !Ref FrontendRouteTable
        - !Ref BackendRouteTable

Outputs:
    VPC:
        Description: A reference to the created VPC
        Value: !Ref Vpc
        Export:
          Name: VPC
    PublicSubnet1:
        Description: Public Subnet Id 1
        Value: !Ref PublicSubnet1
        Export:
          Name: PublicSubnet1
    PublicSubnet2:
        Description: Public Subnet Id 2
        Value: !Ref PublicSubnet2
    PublicSubnet3:
        Description: Public Subnet Id 3
        Value: !Ref PublicSubnet3
    FrontendSubnet1:
        Description: Frontend subnet Id 1
        Value: !Ref FrontendSubnet1
        Export:
          Name: FrontendSubnet1
    FrontendSubnet2:
        Description: Frontend subnet Id 2
        Value: !Ref FrontendSubnet2
    FrontendSubnet3:
        Description: Frontend subnet Id 3
        Value: !Ref FrontendSubnet3
    BackendSubnet1:
        Description: Backend subnet Id 1
        Value: !Ref BackendSubnet1
        Export:
          Name: BackendSubnet1
    BackendSubnet2:
        Description: Backend subnet Id 2
        Value: !Ref BackendSubnet2
        Export:
          Name: BackendSubnet2
    BackendSubnets3:
        Description: Backend subnet Id 3
        Value: !Ref BackendSubnet3
        Export:
          Name: BackendSubnet3

